<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>faulty:carboxide</title>
    <subtitle>something something nitrogen</subtitle>
    <link rel="self" type="application/atom+xml" href="https://faulty.carboxi.de/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://faulty.carboxi.de"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-07-21T00:00:00+00:00</updated>
    <id>https://faulty.carboxi.de/atom.xml</id>
    <entry xml:lang="en">
        <title>Organization and Management</title>
        <published>2025-07-21T00:00:00+00:00</published>
        <updated>2025-07-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              faulty
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://faulty.carboxi.de/organizationandmanagement/"/>
        <id>https://faulty.carboxi.de/organizationandmanagement/</id>
        
        <content type="html" xml:base="https://faulty.carboxi.de/organizationandmanagement/">&lt;p&gt;I have used &lt;a href=&quot;https:&#x2F;&#x2F;obsidian.md&#x2F;&quot;&gt;Obsidian&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;logseq.com&#x2F;&quot;&gt;Logseq&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;orgmode.org&#x2F;&quot;&gt;Org Mode&lt;&#x2F;a&gt; or I should say I have
tried to use them to keep notes, maintain todos and more. I have even tried just markdown with neovim and none of them have worked for
me. This is probably a me problem cause I&#x27;ve seen people using these tools to keep notes and all the other things so good that I feel envious.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Why do I need to keep things so organized? If these tools are not working, maybe I&#x27;m fine with keeping things disorganized.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;But I like the idea of organizing such notes. Having pages and pages of information that you&#x27;ve filled over a significant amount of
time, whether by summarizing a textbook or writing out your thoughts, appear as an interconnected web that somewhat reflects your
personality is a dream of mine.&lt;&#x2F;p&gt;
&lt;p&gt;Before I say What I think is the problem, Lets walk through an example scenerio of what happens when I use such app.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s say I&#x27;ve heard about a new note taking app with pretty unique feature. I would most likely want to try it out. After looking at the features, I
think maybe this is the one. &lt;em&gt;Deep down I know I&#x27;m going to abandon this as well but no harm in trying&lt;&#x2F;em&gt;. For first few days, I will try the app and come
up with some workflow based on that app. I will maybe write journals or things I need to complete each day, notes, all sorts of writings, links to some
resources, ideas etc. After getting used to it, I feel productive with it. It feels like nothing can stop me and maybe this one will actually work. &lt;em&gt;It won&#x27;t&lt;&#x2F;em&gt;
The routine will work flawlessly for few weeks then it will slowly deteriorate. I will use the app&#x2F;workflow less and less each day until I completely
abondon it.&lt;&#x2F;p&gt;
&lt;p&gt;Even though I like to be organized, I don&#x27;t think I&#x27;m an organized person. The most significant problem with all of this is organizing notes and todos. I like to
write for a lot of different things. Things like notes for subjects on my curriculum, notes for the things I&#x27;m learning, blogs, writing about projects, writing about
an online article I found interesting and maybe more. So, it just doesn&#x27;t make sense to keep them all under the same directory. It also doesn&#x27;t make sense to have a
single file type like markdown to write all those different types of notes. I want to have the power of org-mode when writing a blog about algorithmic problem and simple
markdown for something else and maybe just comments on the source file for notes on solving a problem from Advent of Code. In that regard, Emacs and Org-mode came very close
to solving the organization problem and I do believe that it&#x27;s my lack of knowledge about emacs and org-mode to develop a workflow similar to the solution I&#x27;m going to present
soon.&lt;&#x2F;p&gt;
&lt;p&gt;Another problem I have is that I love terminal. So anything that requires me to open a different app already feels less motivating. &lt;em&gt;even though I have no problem wasting hours watching videos on youtube in a browser&lt;&#x2F;em&gt;
This is also the reason I use helix for editing dotfiles or for simple one off codes even though I use emacs as my editor. &lt;em&gt;I know I can use emacs in terminal.&lt;&#x2F;em&gt; Although I said having a web of interconneted notes was like
a dream of mine, I once moved from obsidian (which literally had that built in) to neovim just because it was in terminal.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t know what can solve my problem at the moment. All I can think of is that either I learn how to use emacs org-mode (and maybe roam) properly or make a cli myself. I don&#x27;t have time for either of them so
just gonna wait for a new app or some free time to come.&lt;&#x2F;p&gt;
&lt;p&gt;Bye.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Whats Going On</title>
        <published>2025-07-15T00:00:00+00:00</published>
        <updated>2025-07-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              faulty
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://faulty.carboxi.de/whatsgoingon/"/>
        <id>https://faulty.carboxi.de/whatsgoingon/</id>
        
        <content type="html" xml:base="https://faulty.carboxi.de/whatsgoingon/">&lt;p&gt;It&#x27;s been more than three months since my &lt;a href=&quot;https:&#x2F;&#x2F;faulty.carboxi.de&#x2F;goingallin&#x2F;&quot;&gt;last post&lt;&#x2F;a&gt; where I waffeled about
focusing on rust. I can&#x27;t say I have kept my word nor can I say that I went back on what I said. Instead of explaining
what I mean, I though maybe I should write about all the things I did during the last three months. I am also curious to
know how those three months went by cause it&#x27;s all hazy up here.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of writing about the things I did in chronological order, I though its better to write about them topic wise. &lt;em&gt;Since I can&#x27;t
remember exactly the order of events&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start with&lt;&#x2F;p&gt;
&lt;h2 id=&quot;debian&quot;&gt;Debian&lt;&#x2F;h2&gt;
&lt;p&gt;I switched. To arch BTW.
I&#x27;m still on arch. I did a quick jump to debian trixie and back because of major project (more on that later).
I was using Gnome in debian and stayed with Gnome after switching to arch. That changed after that little hop to debian
and back. I am using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;YaLTeR&#x2F;niri&quot;&gt;niri&lt;&#x2F;a&gt; window manager now.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gnome-niri-and-me&quot;&gt;Gnome, Niri and Me&lt;&#x2F;h3&gt;
&lt;p&gt;A little history about my experience with niri. I was introduced to niri by &lt;a href=&quot;https:&#x2F;&#x2F;flux.carboxi.de&#x2F;&quot;&gt;scientiac&lt;&#x2F;a&gt;. Niri
is a scrollable window manager.
I used niri on nixos before I moved to debian. Since niri wasn&#x27;t (and still isn&#x27;t I think) available as a package on debian, I
tried to build it myself. It depended (maybe not directly) on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wmww&#x2F;gtk4-layer-shell&quot;&gt;gtk4-layer-shell&lt;&#x2F;a&gt; which
was also not available on debian. Again, I tried to build it myself. I couldn&#x27;t. I don&#x27;t remember the exact problem but it was
something about wayland protocols. At the time, freedesktop.org was mitrating its server or something so it was not working. So
I gave up on building niri and stayed with gnome.&lt;&#x2F;p&gt;
&lt;p&gt;After using gnome for a while, I began to like it and niri was completely out of my mind. I was happy with gnome and debian until I
wasn&#x27;t. This was more of a problem with debian than gnome. So I switched to arch &lt;em&gt;btw&lt;&#x2F;em&gt;. I was so in love with gnome that I stayed with
gnome. I had totally forgotten about niri.&lt;&#x2F;p&gt;
&lt;p&gt;It was maybe two weeks ago that I decided to switch to debian trixie due to something related to major project. One thing lead to another
and I decided to build &lt;a href=&quot;https:&#x2F;&#x2F;faulty.carboxi.de&#x2F;whatsgoingon&#x2F;ghostty.org&quot;&gt;ghostty&lt;&#x2F;a&gt;. I ran into some problem and after looking for some time, it said gtk4-layer-shell missing.
I decided to give it another try and build gtk4-layer-shell and to my surprize it build and so did ghostty after that. This got me thinking
that maybe I can build niri too and I could. I switched back to arch the next day because the major project problem was still a problem in
debian too.&lt;&#x2F;p&gt;
&lt;p&gt;I had forgotten all about niri. I know I had. But just building it on debian (I couldn&#x27;t even use it there) brought back so many memory that
I had to go back and I did. I spent the next day configuring niri and am using it as a daily driver. I also have gnome but to be honest I don&#x27;t
think I&#x27;ll go back anytime soon.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;emacs&quot;&gt;Emacs&lt;&#x2F;h2&gt;
&lt;p&gt;I am still using emacs. I have helix (for when I have to do something quickly from terminal) and zed (for looking through linux and redox source code)
but emacs is still the editor of choice (and probably will be for a long time) when it comes to development. I could have included
this in the previous topic if not for ...&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-organ&quot;&gt;The Organ&lt;&#x2F;h3&gt;
&lt;p&gt;The emacs &lt;a href=&quot;https:&#x2F;&#x2F;orgmode.org&#x2F;&quot;&gt;org-mode&lt;&#x2F;a&gt; is an excelent tool for keeping personal notes, literate programming, planning projects among other things.
I had a pretty neat system in place for organizing notes, journals, todos and everything else. I called it &lt;em&gt;Organ&lt;&#x2F;em&gt;. &lt;em&gt;kinda cringe now that I think about it&lt;&#x2F;em&gt;
It was going great. I kept track of things I needed to do each day. I kept the links to articles and videos I found interesting and tried to read or watch one
each day. I kept track of the things I was learning. I don&#x27;t know whether it happened gradually or spontaneously, but I stopped.&lt;&#x2F;p&gt;
&lt;p&gt;I had recently taken up &lt;a href=&quot;https:&#x2F;&#x2F;logseq.com&#x2F;&quot;&gt;Logseq&lt;&#x2F;a&gt; for note taking but it has also been dry for past few days and I have to intention or motivation to continue it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rust&quot;&gt;Rust&lt;&#x2F;h2&gt;
&lt;p&gt;I don&#x27;t know where to begin with this. The books that I mentioned in the previous blogs, I have read two out of four which isn&#x27;t a lot. Actually thats kinda low given the
three months of time frame since I also haven&#x27;t done any project in that time. I do have these to show for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Prime number generation using different techniques in rust. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;faultypointer&#x2F;largestprime&quot;&gt;repo&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;One Billion Rows Challenge in rust. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;faultypointer&#x2F;OneBRC&quot;&gt;repo&lt;&#x2F;a&gt;
I learnt some things about performance and performance testing in rust.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I books that I did complete (&lt;a href=&quot;https:&#x2F;&#x2F;rust-unofficial.github.io&#x2F;too-many-lists&#x2F;index.html&quot;&gt;Learn Rust Entirely with Too Many LinkedList&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;marabos.nl&#x2F;atomics&#x2F;&quot;&gt;Rust Atomics and Locks&lt;&#x2F;a&gt;)
taught me quite a lot about unsafe rust, atomics and memory ordering, rust types thread safe programming etc.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;go&quot;&gt;Go&lt;&#x2F;h3&gt;
&lt;p&gt;I have also been learn go for a week or two. I wanted to learn backend from the ground up and thought go would be perfect for that. Another reason for learning a language other than rust
is to be able to find a job after engineering finishes. &lt;em&gt;9 months to go&lt;&#x2F;em&gt; I probably should have gone with something like java or c++ or python but I like go and after understanding the
the ins and outs of backend development, it shouldn&#x27;t be that hard to learn something like Django, or Laravel or dotnet.&lt;&#x2F;p&gt;
&lt;p&gt;I am currently reading &quot;The Go Programming Language&quot; book. I&#x27;m halfway through it even though its almost been two weeks (or maybe more). But thats just how I
decided to go with this. Rust is still the main focus and with college and major project, I don&#x27;t really have time to &quot;Go all in&quot; on go. Thus goal for this year
on go is to finish this book and follow through two other books called &quot;Lets Go&quot; and &quot;Lets Go Further&quot;. They are tutorial books on web development which is perfect
for this because major project, college etc.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;major-project&quot;&gt;Major Project&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m in my final year of bachelors and we have to do a project this year. With AI becoming more and more relevant these days, we &lt;em&gt;project is done in a group&lt;&#x2F;em&gt;, like everyone else, decided
to do something in the field of AI is what I would have said if we were not complete idiots. Instead we decided to implement OverlayFS for RedoxOS. You can read the proposal &lt;a href=&quot;https:&#x2F;&#x2F;gitlab.com&#x2F;carboxide&#x2F;proposal&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Remember how I said that I haven&#x27;t done any project in rust. Well, a (pseudo) file fystem implementation for a modern micro-kernel based operating system seems like a good first project. &lt;em&gt;also incredebly hard but thats beside the point&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t know what else to say. The mid-term defence for the project is in less than a month and we still have little clue on where to start. The good thing is that the build system for redox os
seems to be working fine now.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;honourable-mentions&quot;&gt;Honourable Mentions&lt;&#x2F;h2&gt;
&lt;p&gt;I think I&#x27;ve spent significant amount of time on this post so I&#x27;m just going to go through with the rest of the topics fast.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;haskell&quot;&gt;Haskell&lt;&#x2F;h3&gt;
&lt;p&gt;I tried to learn haskell. Why? Function programming and I first tried to learn erlang then switched to haskell for asthetics. Had to leave it when the title defence for major project came about and haven&#x27;t
picked it up since.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;where-will-it-go&quot;&gt;Where will it go?&lt;&#x2F;h2&gt;
&lt;p&gt;Now that I have talked about what I have been doing, it only seems fair to talk about what I plan on doing. As for rust and go, the way they are going feels fine. I am doing major project in
rust so the learn won&#x27;t stop and the three books for go is fine. Maybe if I finish early with those books, I will so a project but that depends on the status of major project at that time and
studies too.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;an-organized-workflow&quot;&gt;An Organized Workflow&lt;&#x2F;h3&gt;
&lt;p&gt;I through about ranting anout this here but as I said I have spent enough time for this post so maybe I&#x27;ll write about it in a future post. The gist of it is that I can&#x27;t seem to find a consistent
way to organize notes, todos and all other stuff. Nothing has worked be it obsidian, org-mode, logseq, neovim and markdown. I want to have a workflow that works.&lt;&#x2F;p&gt;
&lt;p&gt;And that is it. I have said all that I wanted to say. &lt;em&gt;maybe not but there are future posts for that&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Bye.&lt;&#x2F;p&gt;
&lt;p&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;Did I mention that I use Arch BTW.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Going All In</title>
        <published>2025-04-10T00:00:00+00:00</published>
        <updated>2025-04-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              faulty
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://faulty.carboxi.de/goingallin/"/>
        <id>https://faulty.carboxi.de/goingallin/</id>
        
        <content type="html" xml:base="https://faulty.carboxi.de/goingallin/">&lt;p&gt;In my blog &lt;a href=&quot;https:&#x2F;&#x2F;faulty.carboxi.de&#x2F;learning&#x2F;&quot;&gt;I Love Learning Things&lt;&#x2F;a&gt;, I said I have trouble focusing on a particular thing I’m learning and my mind races to the next thing it finds interesting or somethign like that. I’m okay with that but I do wanna gradually get rid of that trait [&lt;em&gt;foreshadowing&lt;&#x2F;em&gt;]. And I think I’ve realized what the first step should be.&lt;&#x2F;p&gt;
&lt;p&gt;I still can’t choose what field I wanna work on in the future [&lt;em&gt;maybe the major project can help in that aspect. hopeful&lt;&#x2F;em&gt;]. There are so many things I find interesting. Compiler Design, Operating Systems and low level stuff, Designing Algorithms, Artificial Intelligence to name a few. Backend is something I feel like I would like but as soon as I start to get into it, I wanna quit sooner. Game Development is also something I find interesting and I’ve tried to get into it in the past with Godot game engine but realized it’s not for me. I also find Cybersecurity and Cryptography kinda interesting but have never gotten into them but with my patience, I don’t think I would last even a day [&lt;em&gt;atleast right now&lt;&#x2F;em&gt;]. So choosing a field is not an option right now and not the first step I’m taking about.&lt;&#x2F;p&gt;
&lt;p&gt;The other aspect of this lack of focus thing is the programming language and the problem here is similar. I like a lot of language.&lt;&#x2F;p&gt;
&lt;p&gt;[&lt;em&gt;I thought of going into the history of programming language from my perspective, like the languages I’ve learned, tried etc starting from the begining, but decided against it. I would have to really think about it and today being the 2nd day out of 3 days of the exam preparation of probably the most difficult subject this semester and I wasted the first day doing shit all and yea im wasting precious time writing even this. anyway not history for now. lucky you. but not for long. i’ll write that in the future maybe.&lt;&#x2F;em&gt;]&lt;&#x2F;p&gt;
&lt;p&gt;So, where was I?. Yes I like a lot of language [&lt;em&gt;and it’s not just limited to programming language although never been able to actually learn one except english and obviously the nepali language&lt;&#x2F;em&gt;]. C, Rust, Zig, Go are probably the top four. [&lt;em&gt;not in that order&lt;&#x2F;em&gt;] I also like odin and c3 although never have done anything with them. I have tried getting into functional programming but was unsuccessful. Currently, I’m trying to learn lisp [&lt;em&gt;very slowly&lt;&#x2F;em&gt;] but I think it is about to come to a halt. [&lt;em&gt;more on that later&lt;&#x2F;em&gt;] I don’t know what to say about python. It was the first one I learned. I have some nice memories with it but it’s been very long since I’ve done anything in it.
But enough about the languages I like, what about the languages I hate. I hate javascript with some mild passion. Maybe it’s because I’m a sheep and followed the internet. I hate javascript so much that I decided to write the backend for our minor project in it. I also kinda hate c++ but not really. I used to love c++. I tried to learn it and I did learn it to some extent but the build system, package manager gave me so much head ache that I had to stop. This was exactly why I initially started to learn rust. I didn’t care about the memory safety or whatever. Cargo is what made me love rust.&lt;&#x2F;p&gt;
&lt;p&gt;So programming language is also not the first step either. So what is it the development enviromnents and ide and stuff? Is it NixOs and Vim? Am I making taking about how after switching to nixos, I’ve been essentially cured of distro hopping and once I started using vim I have never seriously gone to any other editor?
… well about that $$..._{ileftnixosandvimandnowusingdebianandemacs}$$&lt;&#x2F;p&gt;
&lt;p&gt;Anyway. It is programming language. It is true that I like all those languages I listed above but what I like more is making stuff. So if choosing a single language is gonna allow me to focus more then I can hold off on using other languages for a while. so what lan- Rust. It was always gonna be rust.&lt;&#x2F;p&gt;
&lt;p&gt;I guess I’ve said all that I have to say. Here are some of the resources I’ve gathered that I will be using.
[&lt;em&gt;I’ll try to update the resources here as I come across more&lt;&#x2F;em&gt;]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a id=&quot;org11aa6e2&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;books&quot;&gt;Books&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rust-unofficial.github.io&#x2F;too-many-lists&#x2F;index.html&quot;&gt;Learn Rust Entirely with Too Many LinkedList&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;nomicon&#x2F;intro.html&quot;&gt;Rustonomicon&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;marabos.nl&#x2F;atomics&#x2F;&quot;&gt;Rust Atomics and Locks&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;veykril.github.io&#x2F;tlborm&#x2F;introduction.html&quot;&gt;The Little Book About Rust Macros&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a id=&quot;org159059c&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;youtube-channel&quot;&gt;Youtube Channel&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;@jonhoo&quot;&gt;Jon Gjengset&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a id=&quot;org19d30d8&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;and-thats-it&quot;&gt;And thats it&lt;&#x2F;h1&gt;
&lt;p&gt;All that I’ve left to say is that I am very exicited for this. With the semester break just around the corner, I can’t wait to do it. Literally. I couldn’t wait for the exams to be over. I have started already: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;faultypointer&#x2F;ThereCanNeverBeTooManyLinkedList&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;faultypointer&#x2F;ThereCanNeverBeTooManyLinkedList&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>I Love Horror Movies</title>
        <published>2025-03-23T00:00:00+00:00</published>
        <updated>2025-03-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              faulty
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://faulty.carboxi.de/horror/"/>
        <id>https://faulty.carboxi.de/horror/</id>
        
        <content type="html" xml:base="https://faulty.carboxi.de/horror/">&lt;p&gt;I have loved paranormal stuff ever since I was a kid. I don&#x27;t know how it started. Maybe it was because of the tales of ghosts, rituals, strange monsters and everything else you can imagine I overheard my mom and aunts talk about. Or maybe it was ignited by the stories of gods and asur my grandfather would tell us.&lt;&#x2F;p&gt;
&lt;p&gt;I loved hearing about some kid being possesed by a god, a dead family member haunting the house, a strange creature that comes out at night near the pond, the haunted mill that was closed because an employee died while operating the machine. It is usually more thrilling when you visit a relative&#x27;s and then you hear about the paranormal stuff that happened at the neighbors just the day before.&lt;&#x2F;p&gt;
&lt;p&gt;As much as I love to listen [&lt;em&gt;or talk or read or watch or anything&lt;&#x2F;em&gt;] about paranormal stuff be it ghosts, demonic creatures, aliens, strange events, I don&#x27;t really believe in any of it. [&lt;em&gt;well I don&#x27;t not believe in aliens, but thats a whole different story&lt;&#x2F;em&gt;]
That doesn&#x27;t mean I don&#x27;t get scared of horror movies [&lt;em&gt;if that were the case, this post wouldn&#x27;t even be a thing&lt;&#x2F;em&gt;], or paranormal stories. I do get scared while watching horror movies, and not just because of the jumpscares, and I do get scared while walking somewhere alone in the night [&lt;em&gt;that may be because of totally different reason but the paranormal factor still adds to that&lt;&#x2F;em&gt;], and I do get scared when its all dark and I feel like something or someone might be next to me.&lt;&#x2F;p&gt;
&lt;p&gt;My point is that even if I don&#x27;t believe any of the paranormal stuff to be real, I am absolutely scared by them.[&lt;em&gt;which I think is a very good thing&lt;&#x2F;em&gt;]
So, How can that be? How can I be scared of something I definitely believe to be not real? Well I don&#x27;t know. Maybe I&#x27;m pretending to not believe in those things.[&lt;em&gt;I&#x27;m not but still lets entertain the idea&lt;&#x2F;em&gt;] Maybe subconsciously believing them to be fake helps me cope with it.[&lt;em&gt;again cope with fucking what but lets pretend&lt;&#x2F;em&gt;] Mayb-. Okay, you know what. I&#x27;m running out of ridiculous reasons for me to be faking about not believing in all this stuff. So here goes. &lt;strong&gt;I absolutely one hundred precent do not believe ghosts or any other paranormal stuff(except maybe the aliens related ones) exists in any form what so ever.&lt;&#x2F;strong&gt;[&lt;em&gt;While we are at it, I also don&#x27;t believe in afterlife. I think there is absolutely nothing after death. So live your life to the fullest&lt;&#x2F;em&gt;]
And you can quote me on that.&lt;&#x2F;p&gt;
&lt;p&gt;After all that foreplay, lets finally talk about the title. &lt;code&gt;I Love Horror Movies&lt;&#x2F;code&gt;.
It all started with those shitty Indian horror movies. &lt;em&gt;Veerana, Khooni Panja&lt;&#x2F;em&gt; and all others that I forgot the names of. They are all shitty movies by today&#x27;s standard but they made me fall in love with the horror genre.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;early-days&quot;&gt;Early Days&lt;&#x2F;h2&gt;
&lt;p&gt;[&lt;em&gt;surprise!! Headings. Nice right?&lt;&#x2F;em&gt;]
My introduction to Hollywood was probably from the horror movies too. These are the movies I watched in my school days (probably class 6, 7) which is why I can&#x27;t name a single one of the top off my head except Conjuring. I do remember what I didn&#x27;t watch: Insidious, Wrong Turn, Paranormal activities.[&lt;em&gt;I still haven&#x27;t watched them by the way. Never will. I think the time has passed on these ones.&lt;&#x2F;em&gt;] I used to love zombie movies like Train to Busan and [&lt;em&gt;yet again&lt;&#x2F;em&gt;] all others that I can&#x27;t remember. As you can see, I don&#x27;t really remember much from this time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;welcome-to-the-internet&quot;&gt;Welcome to the internet&lt;&#x2F;h2&gt;
&lt;p&gt;Finally wifi in the house[&lt;em&gt;well technically wifi in the rented room but still wifi!!&lt;&#x2F;em&gt;]. It was around the time I discovered reddit so that meant I had a lot more and good movie recommendations. It was also around the time I started to watch TV series which is probably why I watched horror movies which were a part of a cinematic universe. Or maybe It was because of MCU.
I don&#x27;t really remember much about Halloween and don&#x27;t really care. I remember Michael Myers and his mask. I remember some other stuff which I not entirely sure is from Halloween movies like Monica from friends begin in one of the newer ones. I checked and it was not Halloween. It was Scream.&lt;&#x2F;p&gt;
&lt;p&gt;I remember the first Freddie Kruger movie quite well. Although I had to check what the name was. It was more memorable than the Halloween ones. I still know the overall summary. Guy gets burned because of misunderstanding? [&lt;em&gt;maybe he was actually a pedo or murderer. can&#x27;t remember&lt;&#x2F;em&gt;]. Haunts the chidrens of the people who were responsible? for his death. I don&#x27;t think I watched any of the sequels tho.&lt;&#x2F;p&gt;
&lt;p&gt;I watched almost all of the saw movies, I think. It got progressively worse.
I am like 99 percent sure I watched atleast some of the Friday the 13th movies but I can&#x27;t remember anything. Literally nothing comes to my mind.[&lt;em&gt;And It doesn&#x27;t even make sense. I love friday the 13th. The date. Not only is it the &#x27;horror&#x27; date but it is also the day I was almost born. If only I was 10 minutes early. Saturday the 14th. 00:10. Mark the date. And the time.&lt;&#x2F;em&gt;]
Scream was a good twist on the slasher genre. For the first one. Then it got repeatative. It was still fun.
I never got into the Cunjuring franchise. I watched the first conjuring and the annabell. Maybe I watched the second conjuring. Never got into the nun movies.
Finally the two of my favourite horror movie franchise: Child&#x27;s Play and Final Destination.
Like saw, the chucky movies did get shittier but I still enjoyed them very much. Same with Final Destination. I was genuinely excited when I heard about the chucky series. I&#x27;m also excited [&lt;em&gt;not much tho&lt;&#x2F;em&gt;] about the new Final Destination movie thats about to come.&lt;&#x2F;p&gt;
&lt;p&gt;There are a lot of horror movies and tv shows that I watched and if I went on to explain each of them like this, it will be a very long post. [&lt;em&gt;which it already is.&lt;&#x2F;em&gt;]
So I&#x27;m just gonna list &quot;few&quot; of the movies and tv shows that come to my mind. The hunting of the hill house. As above so below. The grudge (not the sitty american remake). Skinamarink. Midsommer. Get out. Us. Late Night with the devil. Descent. Rec. Goodnight mommy (not the shitty american remake). Sinister.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;no-gore&quot;&gt;No Gore&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s talk about what I like in a horror movie or rather what I don&#x27;t like and I don&#x27;t like gore. I can handle severed limbs, severed heads, severed &lt;insert any body part&gt; just like the next guy. Exploding heads, eye pops out, flaying, I&#x27;m good with all of that. But if the whole horror aspect is in the shock value of gore then count me out. Same with jumpscares. If done right and in moderation, jumpscares are the best part of the movie for me.&lt;&#x2F;p&gt;
&lt;p&gt;I watch horror movie because I like to be scared. So anything that makes me scared, I like. Mostly it is the atmosphere. I want the movie to be so dreadful that I have to fight the urge to pee in the middle on night, that I don&#x27;t wanna get out of bed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-perfect-condition&quot;&gt;The Perfect Condition&lt;&#x2F;h2&gt;
&lt;p&gt;You can&#x27;t be scared of a horror movie without the perfect (or atleast somewhat favorable) setting. One of the most crutial part of that setting is being alone. If I can see other people, all that sense of dread is gone. Sometimes being alone in the room is also not enough. I&#x27;ve lived in a rented rooms for nearly five years on two different cities and I&#x27;ve watched many horror movies in said rooms. But they just don&#x27;t hit the same when watching horror movies alone in my home. It really does help that my home is located in a town. And when you are home alone then you are really home alone. It just feels different. I don&#x27;t know how to explain it.
I don&#x27;t think I need to say why night time is the best [&lt;em&gt;and only&lt;&#x2F;em&gt;] time to watch horror movie.
Now weather. Any weather is fine as long as the previous conditions meet but if its raining and specially with lightning and thunder[&lt;em&gt;sidenote: I&#x27;ve the similar feeling about lightning and thunder as I have of paranormal stuff. I am scared of it but I also thing it&#x27;s the absolute best weather for falling asleep.&lt;&#x2F;em&gt;], It. Is. Simply. The. Best.&lt;&#x2F;p&gt;
&lt;p&gt;I think I&#x27;ve rambled on for long enough. I don&#x27;t have anything to add. Bye.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>I love learning things.</title>
        <published>2025-03-09T00:00:00+00:00</published>
        <updated>2025-03-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              faulty
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://faulty.carboxi.de/learning/"/>
        <id>https://faulty.carboxi.de/learning/</id>
        
        <content type="html" xml:base="https://faulty.carboxi.de/learning/">&lt;p&gt;I love learning &lt;em&gt;new&lt;&#x2F;em&gt; things. [&lt;em&gt;I love reading in general and maybe I&#x27;ll talk about that some other time&lt;&#x2F;em&gt;] It can be things from my syllabus, a new programming language[&lt;em&gt;I absolutely love learning new languages&lt;&#x2F;em&gt;] or a library or framework. I even tried [&lt;em&gt;and failed time and time again&lt;&#x2F;em&gt;] learning japanese. I&#x27;m currently reading a book called &lt;strong&gt;How to Prove It&lt;&#x2F;strong&gt; by &lt;em&gt;Daniel J. Velleman&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And also a book called &lt;strong&gt;Introduction to Applied Linear Algebra&lt;&#x2F;strong&gt; by &lt;em&gt;Stephen Boyd&lt;&#x2F;em&gt; and &lt;em&gt;Lieven Vandenberghe&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m taking a course on &lt;strong&gt;Machine Learning Specialization&lt;&#x2F;strong&gt; by &lt;em&gt;Andrew NG&lt;&#x2F;em&gt; on coursera.&lt;&#x2F;p&gt;
&lt;p&gt;And also learning The Go programming language.&lt;&#x2F;p&gt;
&lt;p&gt;All this while studying for six subjects this semester.&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;re probably thinking &quot;what a pretentious asshole&quot; and I&#x27;m one but that is not the problem. You see the problem starts when another &quot;interesting&quot; thing comes up, or when the thing I am currently learning get kinda hard and I have to put way too much effort into it. Something it doesn&#x27;t have to be anything. If I skip learning the thing I was learning for significant amount of time, there is a high chance I wouldn&#x27;t want to continue it. Same goes for the projects I do.&lt;&#x2F;p&gt;
&lt;p&gt;So what do I plan to do to avoid this kind of stuff?&lt;&#x2F;p&gt;
&lt;p&gt;Absolutely Nothing.&lt;&#x2F;p&gt;
&lt;p&gt;Why would I? I &lt;strong&gt;am&lt;&#x2F;strong&gt; learning something.&lt;&#x2F;p&gt;
&lt;p&gt;I have huge respect for [&lt;em&gt;and am a little envious of&lt;&#x2F;em&gt;]  people who can just commit to a single thing and work on it for months and years but that stuff is not for me[&lt;em&gt;atleast not yet&lt;&#x2F;em&gt;].
If I can&#x27;t commit to anything specific then so be it. And who knows, while I&#x27;m learning and trying out a bunch of stuff, I might find something I can just work on for years without getting any fatigue [&lt;em&gt;I really hope so&lt;&#x2F;em&gt;].&lt;&#x2F;p&gt;
&lt;p&gt;I &lt;strong&gt;have&lt;&#x2F;strong&gt; tried to reduce the time I spent on reddit, youtube and stuff. This way I can try even more stuff.&lt;&#x2F;p&gt;
&lt;p&gt;So what is the problem? Nothing I guess. Told you I was a pretentious asshole. Now, if I can just accept the fact that I don&#x27;t have to force myself to commit to anything specific.&lt;&#x2F;p&gt;
&lt;p&gt;But I&#x27;m worried. What if I don&#x27;t find anything until its too late. What if by the time I figure out the thing I want to do, it has advanced so far ahead that I can&#x27;t catch up.&lt;&#x2F;p&gt;
&lt;p&gt;Too much deep stuff so can I just say, I&#x27;m listening to &lt;strong&gt;No.6 Collaboration Project&lt;&#x2F;strong&gt; and it is such a banger. Every single song on this album.&lt;&#x2F;p&gt;
&lt;p&gt;Back to brooding.
What about job. I don&#x27;t want to stuck at a job I don&#x27;t wanna do for years because I can&#x27;t find the thing I wanna do and I can&#x27;t climb up in the current job because I just can&#x27;t force myself into it.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t have anything to add but I don&#x27;t wanna end this post on a pensive mood.&lt;&#x2F;p&gt;
&lt;p&gt;So, sorry anyone who got flash banged by my previous post.&lt;&#x2F;p&gt;
&lt;p&gt;[&lt;em&gt;Ooh, I love it when you do it like that
And when you&#x27;re close up, give me the shivers&lt;&#x2F;em&gt;]&lt;&#x2F;p&gt;
&lt;p&gt;The music went past &lt;strong&gt;No.6 Collaboration Project&lt;&#x2F;strong&gt; and now its playing other Ed Sheeran song. Most of his songs are bangers. Now it&#x27;s playing &lt;strong&gt;Bad Liar&lt;&#x2F;strong&gt; by Imagine Dragons. Feels kinda nostalgic.&lt;&#x2F;p&gt;
&lt;p&gt;Also I&#x27;m alone today and it&#x27;s night time. Perfect time to watch a horror movie[&lt;em&gt;Also perfect time to watch some other movies but today we get scared&lt;&#x2F;em&gt;].&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>I Do Have Mouth, and Still I Can&#x27;t Scream</title>
        <published>2025-03-07T00:00:00+00:00</published>
        <updated>2025-03-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              faulty
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://faulty.carboxi.de/adhd/"/>
        <id>https://faulty.carboxi.de/adhd/</id>
        
        <content type="html" xml:base="https://faulty.carboxi.de/adhd/">&lt;p&gt;fuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccckkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk. [&lt;em&gt;ffffffffffffffffffffffuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuukkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccckkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk&lt;&#x2F;em&gt;]&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A problem a day: Day 5</title>
        <published>2025-02-25T00:00:00+00:00</published>
        <updated>2025-02-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              faulty
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://faulty.carboxi.de/aproblemaday5/"/>
        <id>https://faulty.carboxi.de/aproblemaday5/</id>
        
        <content type="html" xml:base="https://faulty.carboxi.de/aproblemaday5/">&lt;h2 id=&quot;origin&quot;&gt;Origin&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;problem&quot;&gt;Problem&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;strong&gt;appeal&lt;&#x2F;strong&gt; of a string is the number of &lt;strong&gt;distinct&lt;&#x2F;strong&gt; characters found in the string.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;For example, the appeal of &lt;code&gt;&quot;abbca&quot;&lt;&#x2F;code&gt; is &lt;code&gt;3&lt;&#x2F;code&gt; because it has &lt;code&gt;3&lt;&#x2F;code&gt; distinct characters: &lt;code&gt;&#x27;a&#x27;&lt;&#x2F;code&gt;, &lt;code&gt;&#x27;b&#x27;&lt;&#x2F;code&gt;, and &lt;code&gt;&#x27;c&#x27;&lt;&#x2F;code&gt;.
Given a string &lt;code&gt;s&lt;&#x2F;code&gt;, return &lt;em&gt;the &lt;strong&gt;total appeal of all of its substrings.&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;
A &lt;strong&gt;substring&lt;&#x2F;strong&gt; is a contiguous sequence of characters within a string.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;example-1&quot;&gt;Example 1&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;Input:&lt;&#x2F;strong&gt; s = &quot;abbca&quot;
&lt;strong&gt;Output:&lt;&#x2F;strong&gt; 28
&lt;strong&gt;Explanation:&lt;&#x2F;strong&gt; The following are the substrings of &quot;abbca&quot;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Substrings of length 1: &quot;a&quot;, &quot;b&quot;, &quot;b&quot;, &quot;c&quot;, &quot;a&quot; have an appeal of 1, 1, 1, 1, and 1 respectively. The sum is 5.&lt;&#x2F;li&gt;
&lt;li&gt;Substrings of length 2: &quot;ab&quot;, &quot;bb&quot;, &quot;bc&quot;, &quot;ca&quot; have an appeal of 2, 1, 2, and 2 respectively. The sum is 7.&lt;&#x2F;li&gt;
&lt;li&gt;Substrings of length 3: &quot;abb&quot;, &quot;bbc&quot;, &quot;bca&quot; have an appeal of 2, 2, and 3 respectively. The sum is 7.&lt;&#x2F;li&gt;
&lt;li&gt;Substrings of length 4: &quot;abbc&quot;, &quot;bbca&quot; have an appeal of 3 and 3 respectively. The sum is 6.&lt;&#x2F;li&gt;
&lt;li&gt;Substrings of length 5: &quot;abbca&quot; has an appeal of 3. The sum is 3.
The total sum is 5 + 7 + 7 + 6 + 3 = 28.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;example-2&quot;&gt;Example 2&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;Input:&lt;&#x2F;strong&gt; s = &quot;code&quot;
&lt;strong&gt;Output:&lt;&#x2F;strong&gt; 20
&lt;strong&gt;Explanation:&lt;&#x2F;strong&gt; The following are the substrings of &quot;code&quot;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Substrings of length 1: &quot;c&quot;, &quot;o&quot;, &quot;d&quot;, &quot;e&quot; have an appeal of 1, 1, 1, and 1 respectively. The sum is 4.&lt;&#x2F;li&gt;
&lt;li&gt;Substrings of length 2: &quot;co&quot;, &quot;od&quot;, &quot;de&quot; have an appeal of 2, 2, and 2 respectively. The sum is 6.&lt;&#x2F;li&gt;
&lt;li&gt;Substrings of length 3: &quot;cod&quot;, &quot;ode&quot; have an appeal of 3 and 3 respectively. The sum is 6.&lt;&#x2F;li&gt;
&lt;li&gt;Substrings of length 4: &quot;code&quot; has an appeal of 4. The sum is 4.
The total sum is 4 + 6 + 6 + 4 = 20.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;constraints&quot;&gt;Constraints&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;$1 &amp;lt;= s.length &amp;lt;= 10^5$&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;s&lt;&#x2F;code&gt; consists of lowercase English letters.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;journey&quot;&gt;Journey&lt;&#x2F;h2&gt;
&lt;p&gt;To find the appeal of just the string, loop through every element, putting each of them in a set. finally calculate the length of set.
do this for every substring of length 1 to n&lt;&#x2F;p&gt;
&lt;p&gt;How many substrings does the string have.
there are n substrings of size 1
n-1 substrings of size 2 and so on until 1 substring of size 1
so total substrings = $\frac{n(n+1)}{2}$
and we have to check for unique elements for each substring
so the time complexity is $\mathcal{O}(n^3)$&lt;&#x2F;p&gt;
&lt;p&gt;so is there a better way. There has to be right?
the previous loop should help then next one&lt;&#x2F;p&gt;
&lt;p&gt;I couldn&#x27;t find a better one for some time so i just tried the above process (code below) and yea time limit exceeded so there is a better solution. I knew there was but i just had to be sure after &lt;a href=&quot;https:&#x2F;&#x2F;faulty.carboxi.de&#x2F;aproblemaday4&quot;&gt;yerterday&lt;&#x2F;a&gt;&#x27;s disaster of a question.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;collections&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;HashSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Solution {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;appeal_sum&lt;&#x2F;span&gt;&lt;span&gt;(s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; String) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;i64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; total_appeal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;size {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;HashSet&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;HashSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;with_capacity(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;26&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(s[j])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;                  
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                total_appeal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        total_appeal
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;anyway so what is it. what can i do.&lt;&#x2F;p&gt;
&lt;p&gt;divide and conquer??&lt;&#x2F;p&gt;
&lt;p&gt;let me try something&lt;&#x2F;p&gt;
&lt;p&gt;I tried using python to calculate the appeal of a substring to see if it worked. well the time exceeded on this one too. but on a different and bigger size string.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Solution&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;appealSum&lt;&#x2F;span&gt;&lt;span&gt;(self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#88c0d0;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(s)
&lt;&#x2F;span&gt;&lt;span&gt;        total_appeal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;n
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#88c0d0;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#88c0d0;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;i):
&lt;&#x2F;span&gt;&lt;span&gt;                total_appeal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#88c0d0;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(s[j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]))
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;total_appeal
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;so python faster than rust. lets goo&lt;&#x2F;p&gt;
&lt;p&gt;okay i may have spoken too early. the leetcode just showed the last ran test case
so idk if the python one failed on the larger input and rust on smaller input or not&lt;&#x2F;p&gt;
&lt;p&gt;my bad
but i still think the python ones faster. lets see if i can do this in rust&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;collections&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;HashSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Solution {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;appeal_sum&lt;&#x2F;span&gt;&lt;span&gt;(s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; String) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;i64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; total_appeal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; size {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;HashSet&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;HashSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from_iter(s[i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;to_vec&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                total_appeal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        total_appeal
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;still didnt work tho&lt;&#x2F;p&gt;
&lt;p&gt;there has to be someway to do this in $n^2$ time.
if only i could find the appeal of the substring in constant time.
because i don&#x27;t think i can do this without looping through each substring
or can i&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;collections&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;HashSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Solution {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;appeal_sum&lt;&#x2F;span&gt;&lt;span&gt;(s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; String) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;i64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;chars&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|elem| elem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as u8 - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;97&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; total_appeal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;n {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;HashSet&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;HashSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;with_capacity(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;26&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; counts&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;26&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;26&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;size {
&lt;&#x2F;span&gt;&lt;span&gt;                counts[s[j] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as usize&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(s[j])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;n {
&lt;&#x2F;span&gt;&lt;span&gt;                set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(s[i])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                counts[s[i] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as usize&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                total_appeal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; counts[s[i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;size] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as usize&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;s[i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;size])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                counts[s[i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;size] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as usize&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        total_appeal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as i64
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;this one definitely passed the testcase the previous two didn&#x27;t pass. but it was still not enough.
but why&lt;&#x2F;p&gt;
&lt;p&gt;is this really some divide and conquer bs that im not getting&lt;&#x2F;p&gt;
&lt;p&gt;im really lost with this one&lt;&#x2F;p&gt;
&lt;p&gt;i think im gonna dip.&lt;&#x2F;p&gt;
&lt;p&gt;i used flamegraph and i think it said 95% time is taken by the HashSet.insert() function call.
I&#x27;ll try to thing of a way to not use hashset or&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;appeal_sum&lt;&#x2F;span&gt;&lt;span&gt;(s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; String) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;i64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;chars&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|elem| elem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as u8 - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;97&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; total_appeal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;n {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;HashSet&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;HashSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;with_capacity(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;26&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; counts&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;26&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;26&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;size {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s[j] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            counts[idx] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; counts[idx] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(s[j])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;n {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s[i] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            counts[s[i] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as usize&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; counts[idx] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(s[i])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            total_appeal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; counts[s[i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; size] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as usize&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;s[i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; size])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            counts[s[i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; size] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as usize&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    total_appeal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as i64
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;only insert if there isnt already stuff in it. which i feel like made it fast but not enough&lt;&#x2F;p&gt;
&lt;p&gt;I think this is it for today.
maybe ill continue this tomorrow or some other day&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A problem a day: Day 4</title>
        <published>2025-02-24T00:00:00+00:00</published>
        <updated>2025-02-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              faulty
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://faulty.carboxi.de/aproblemaday4/"/>
        <id>https://faulty.carboxi.de/aproblemaday4/</id>
        
        <content type="html" xml:base="https://faulty.carboxi.de/aproblemaday4/">&lt;h2 id=&quot;origin&quot;&gt;Origin&lt;&#x2F;h2&gt;
&lt;p&gt;url: &lt;a href=&quot;https:&#x2F;&#x2F;leetcode.com&#x2F;problems&#x2F;rotate-image&#x2F;description&#x2F;&quot;&gt;Leetcode problem 48&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;problem&quot;&gt;Problem&lt;&#x2F;h3&gt;
&lt;p&gt;You are given an &lt;code&gt;n x n&lt;&#x2F;code&gt; 2D &lt;code&gt;matrix&lt;&#x2F;code&gt; representing an image, rotate the image by &lt;strong&gt;90&lt;&#x2F;strong&gt; degrees (clockwise).&lt;&#x2F;p&gt;
&lt;p&gt;You have to rotate the image &lt;em&gt;in-place&lt;&#x2F;em&gt;, which means you have to modify the input 2D matrix directly. &lt;strong&gt;DO NOT&lt;&#x2F;strong&gt; allocate another 2D matrix and do the rotation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;example-1&quot;&gt;Example 1&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;[                                    [
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;---&amp;gt;               &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;---&amp;gt;               &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;]         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;---&amp;gt;               &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;]                                    ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Input:&lt;&#x2F;strong&gt; matrix = [ [1,2,3],[4,5,6],[7,8,9] ]
&lt;strong&gt;Output:&lt;&#x2F;strong&gt; [ [7,4,1],[8,5,2],[9,6,3] ]&lt;&#x2F;p&gt;
&lt;h4 id=&quot;example-2&quot;&gt;Example 2&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;Original Matrix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;               Rotated &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Matrix &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt; degrees clockwise)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;9 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;11 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|          | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;15 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;13 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|          | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;14 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;13 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|          | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;12 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;9 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;15 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;14 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;12 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;16 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|          | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;16 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;11 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;constraints&quot;&gt;Constraints&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n == matrix.length == matrix[i].length&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 20&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-1000 &amp;lt;= matrix[i][j] &amp;lt;= 1000&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;journey&quot;&gt;Journey&lt;&#x2F;h2&gt;
&lt;p&gt;In place rotation.
Is there a trap here somewhere or is it the issue of time.
cause I feel like you just reverse the rows and then transpose the resulting matrix and you get the 90 degree rotation&lt;&#x2F;p&gt;
&lt;p&gt;or does this not count as in-place. im not creating another 2d matrix so it must count right.&lt;&#x2F;p&gt;
&lt;p&gt;well it did work.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Solution {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;(matrix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; matrix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; temp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;i32 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;n {
&lt;&#x2F;span&gt;&lt;span&gt;                temp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; matrix[i][j]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                matrix[i][j] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; matrix[n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;i][j]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                matrix[n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;i][j] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; temp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;n {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;n {
&lt;&#x2F;span&gt;&lt;span&gt;                temp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; matrix[i][j]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                matrix[i][j] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; matrix[j][i]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                matrix[j][i] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; temp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;destination&quot;&gt;Destination&lt;&#x2F;h2&gt;
&lt;p&gt;Well this is a first.
When I chose this question, I didn&#x27;t really think much. I just saw matrix and inplace and thought to myself. well this should be interesting. Well it was interesting for a minute.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t know who labelled this problem as medium. The &lt;a href=&quot;https:&#x2F;&#x2F;faulty.carboxi.de&#x2F;aproblemaday4&#x2F;.&#x2F;aproblemaday2.md&quot;&gt;A Problem a Day 2&lt;&#x2F;a&gt; problem was medium and in hindsight It was not that difficult but it did require me to think about it the problem for a bit. I&#x27;m still doubting if I did it the right way or not.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway. enough about this shitass of a problem.
how&#x27;s life?&lt;&#x2F;p&gt;
&lt;p&gt;have you heard about mersenne prime. Now they very interesting. I might have a post coming up about it (spoilers).&lt;&#x2F;p&gt;
&lt;p&gt;so what do i add. It hasn&#x27;t even crossed the 500 words. Its currenly at 407 words. wait no 408. wow that jumped to 411. 416, 417, 418, 419, 421. aha finally caught it.
dammit it jumped to 425 again. yes this is whats happening today.
don&#x27;t blame me. blame the question. [&lt;em&gt;seriously questioning what am i doing?&lt;&#x2F;em&gt;]&lt;&#x2F;p&gt;
&lt;p&gt;wowowowoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo&lt;&#x2F;p&gt;
&lt;p&gt;did you know I stopped reading the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;FFmpeg&#x2F;asm-lessons&quot;&gt;Ffmpeg school of assembly&lt;&#x2F;a&gt; to do this question. I was like okay there are only three lessons and I have completed the first one so let me stop and do the a problem a day thing.&lt;&#x2F;p&gt;
&lt;p&gt;two words.
&lt;img src=&quot;&#x2F;images&#x2F;apad4-words.png&quot; alt=&quot;word count of this note in obsidian&quot; &#x2F;&gt;
bye.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A problem a day: Day 3</title>
        <published>2025-02-23T00:00:00+00:00</published>
        <updated>2025-02-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              faulty
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://faulty.carboxi.de/aproblemaday3/"/>
        <id>https://faulty.carboxi.de/aproblemaday3/</id>
        
        <content type="html" xml:base="https://faulty.carboxi.de/aproblemaday3/">&lt;h2 id=&quot;origin&quot;&gt;Origin&lt;&#x2F;h2&gt;
&lt;p&gt;url: &lt;a href=&quot;https:&#x2F;&#x2F;leetcode.com&#x2F;problems&#x2F;smallest-good-base&#x2F;description&#x2F;&quot;&gt;Leetcode: Problem no. 483&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;problem&quot;&gt;Problem&lt;&#x2F;h3&gt;
&lt;p&gt;Given an integer &lt;code&gt;n&lt;&#x2F;code&gt; represented as a string, return &lt;em&gt;the smallest &lt;strong&gt;good base&lt;&#x2F;strong&gt; of&lt;&#x2F;em&gt; &lt;code&gt;n&lt;&#x2F;code&gt;.
We call &lt;code&gt;k &amp;gt;= 2&lt;&#x2F;code&gt; a &lt;strong&gt;good base&lt;&#x2F;strong&gt; of &lt;code&gt;n&lt;&#x2F;code&gt;, if all digits of &lt;code&gt;n&lt;&#x2F;code&gt; base &lt;code&gt;k&lt;&#x2F;code&gt; are &lt;code&gt;1&lt;&#x2F;code&gt;&#x27;s.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;example-1&quot;&gt;Example 1&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;&#x2F;strong&gt; n = &quot;13&quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;&#x2F;strong&gt; &quot;3&quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;&#x2F;strong&gt; 13 base 3 is 111.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;example-2&quot;&gt;Example 2&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;&#x2F;strong&gt; n = &quot;4681&quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;&#x2F;strong&gt; &quot;8&quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;&#x2F;strong&gt; 4681 base 8 is 11111.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;example-3&quot;&gt;Example 3&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;&#x2F;strong&gt; n = &quot;1000000000000000000&quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;&#x2F;strong&gt; &quot;999999999999999999&quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;&#x2F;strong&gt; 1000000000000000000 base 999999999999999999 is 11.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;constraints&quot;&gt;Constraints&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n&lt;&#x2F;code&gt; is an integer in the range $[3, 10^{18}]$.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;n&lt;&#x2F;code&gt; does not contain any leading zeros.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;journey&quot;&gt;Journey&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;d like to believe there is a formula for this.
Every digit should be 1 so
$$
n = \sum_{p=0}^t k^p
$$
I need to find out what k is. I don&#x27;t know that &lt;code&gt;t&lt;&#x2F;code&gt; gives the smallest &lt;code&gt;k&lt;&#x2F;code&gt; for a given &lt;code&gt;n&lt;&#x2F;code&gt;. I do know that for &lt;code&gt;t=1&lt;&#x2F;code&gt;
$n = k^0 + k^1$
$k = n-1$
so t = 1 gives the largest (and is some cases like example 3 above the only) base &lt;code&gt;k&lt;&#x2F;code&gt; for which all the digits are 1.&lt;&#x2F;p&gt;
&lt;p&gt;I also know that as I keep increasing t, then I will keep finding a &lt;code&gt;k&lt;&#x2F;code&gt; smaller than the previous one (if it exists).
But where do I stop? or better yet where do I begin high and keep decreasing &lt;code&gt;t&lt;&#x2F;code&gt; until I find a valid &lt;code&gt;k&lt;&#x2F;code&gt;
since $k \ge 2$, we can find the largest t where k is 2.
$$
\begin{align*}
n &amp;amp;= \sum_{p=0}^t 2^p \\
n &amp;amp;= 2^0 + 2^1 + 2^2 + ... + 2^t \\
n &amp;amp;= \frac{1-2^{t+1}}{1-2} \\
n &amp;amp;= 2^{t+1} - 1 \\
t+1 &amp;amp;= \log_2(n+1) \\
t &amp;amp;= \log_2(\frac{n+1}{2})
\end{align*}
$$
so we can start at &lt;code&gt;t&lt;&#x2F;code&gt; equal to the above value, and &lt;code&gt;k=2&lt;&#x2F;code&gt; we can compute $n\prime$ as
$$
n\prime = \frac{k^{t+1} -1}{k-1}
$$
Now if this $n\prime$ is equal to the given n then we have found that the good base &lt;code&gt;k&lt;&#x2F;code&gt;. If not, then there are two cases. If $n\prime \le n$, then we should increment &lt;code&gt;k&lt;&#x2F;code&gt; otherwise decrement &lt;code&gt;t&lt;&#x2F;code&gt;. Now the solution seems innocent enough.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that in the worst case we have to go from &lt;code&gt;k=2&lt;&#x2F;code&gt; go k = &lt;code&gt;n-1&lt;&#x2F;code&gt; and thats not all. We are iterating over &lt;code&gt;t&lt;&#x2F;code&gt; which starts at the log of &lt;code&gt;n+1&lt;&#x2F;code&gt; and stops at &lt;code&gt;t=2&lt;&#x2F;code&gt;. For simplification, lets say that we check for all values of &lt;code&gt;k&lt;&#x2F;code&gt; in range [2, n-1], for all values of &lt;code&gt;t&lt;&#x2F;code&gt; in range $[log_2{(n+1)&#x2F;2}, 2]$. Then the worst case time complexity is $\mathcal{O}(n log(n))$.&lt;&#x2F;p&gt;
&lt;p&gt;Which doesn&#x27;t seem much. The sorting algorithms are $\mathcal{O}(n log(n))$.  But look at the constraints. The n can be as high as $10^{18}$.  Now my laptop has a cpu with speed of 2GHz. (forget about how many processors ans such for now). That means that it can run a maximum of $2*10^9$ clock cycles per second(also forgetting about boost and overclock because I also don&#x27;t know). Lets be very very very optimistic here and suppose that every operation in that algorithm takes a single clock cycle[&lt;em&gt;I may not know hardware stuff very much but I did have microprocessor as a subject in one of semester. So trust me when I say this would have been the biggest lie I&#x27;ve ever told if it wasn&#x27;t for the next line.&lt;&#x2F;em&gt;]. Lets also suppose that the line of code translates 1:1 to operations then the code below (in python).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;good_base&lt;&#x2F;span&gt;&lt;span&gt;(n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;math&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span&gt;(math&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;log2&lt;&#x2F;span&gt;&lt;span&gt;((n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;while True&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        n_prime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(math&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;pow&lt;&#x2F;span&gt;&lt;span&gt;(k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;(k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;n_prime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;n:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;n_prime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;n:
&lt;&#x2F;span&gt;&lt;span&gt;            k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;k
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then the loop of 8 lines takes about $\frac{8n}{2*10^{9}}$ seconds to run. For numbers less than $10^9$, it takes less than a second. Why bother with the numbers in between, lets go straight to the last one. It takes about $4000000000$ seconds. That is, it takes $126.84$ years for this hugely oversimplified and optimistic imaginary computational model to find out that the required k is $10^{18} -1$.&lt;&#x2F;p&gt;
&lt;p&gt;So what to do. what to do.&lt;&#x2F;p&gt;
&lt;p&gt;aha. Good old binary search to the rescue
why do i have to search the the numbers for k 2 through n-1. what i can do is
check for every t from the maximum one given by $\log_2(\frac{n+1}{2})$ down to 1
if k = 2 results in $n\prime = n$. if it does we have found the smallest good base if not we have to go for the middle one. so what is the middle one
$$
k_{mid} = \frac{k_0(2)+?}{2}
$$
we need to figure out the maximum k. Now could just use &lt;code&gt;n-1&lt;&#x2F;code&gt;. if we are doing binary search then we only check the log(n) numbers.
$log_2(10^{18}) = 59.79$
and we have to check that max t to 1 and max t is also given by log base 2 of n. So the number of elements we are checking for the maximum n defined for this problem is nearly $60*60=3600$. compare that with $60 * 10 ^{18}$ we were doing earlier.
Lo and behold&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;math
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;good_base2&lt;&#x2F;span&gt;&lt;span&gt;(n):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    temp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;temp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        temp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F;&#x2F;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;        t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    found &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= False
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;while not &lt;&#x2F;span&gt;&lt;span&gt;found &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;        k_m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;n
&lt;&#x2F;span&gt;&lt;span&gt;        prev_k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;n:
&lt;&#x2F;span&gt;&lt;span&gt;            numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#88c0d0;&quot;&gt;pow&lt;&#x2F;span&gt;&lt;span&gt;(k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;            denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;            n_prime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;denominator            
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;n_prime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;n:
&lt;&#x2F;span&gt;&lt;span&gt;                found &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= True
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;n_prime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;n:
&lt;&#x2F;span&gt;&lt;span&gt;                prev_k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;k
&lt;&#x2F;span&gt;&lt;span&gt;                k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;k_m) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                k_m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;k
&lt;&#x2F;span&gt;&lt;span&gt;                k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(prev_k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;k_m) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;prev_k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;k:
&lt;&#x2F;span&gt;&lt;span&gt;                t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;k 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;an imaginary and hopefully delusional time of 126 years to
&lt;img src=&quot;&#x2F;images&#x2F;apad3-sol2-time.png&quot; alt=&quot;Running time of solution 2 to n = 10^18&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;but we can do better. atleast theoretically. It does involve computing square root.
What am I taking about?
well you see how we computed the maximum t given a n.
we can also do the opposite. we can compute the maximum &lt;code&gt;k&lt;&#x2F;code&gt; for a given &lt;code&gt;t&lt;&#x2F;code&gt; such that any value of k more than this will make &lt;code&gt;n prime&lt;&#x2F;code&gt; greater than &lt;code&gt;n&lt;&#x2F;code&gt;.
we have
$$
n = k^0 + k ^1 + k^2 + .... + k^t
$$
lets us ignore all the expression of &lt;code&gt;k&lt;&#x2F;code&gt; before $k^t$ so it becomes
$$
\begin{aligned}
n = k^t \
k = \sqrt[t]{n}
\end{aligned}
$$
for any k greater than this would make the calculated n prime greater than n.
as a bonus we can just check with the final value as $\sqrt[t]{n}$ and if the calculated n is smaller than given n then we just go to the next t. What if its bigger than the given then we just subtract one from the calculated &lt;code&gt;k&lt;&#x2F;code&gt; for this t ($\sqrt[t]{n}$).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;good_base3&lt;&#x2F;span&gt;&lt;span&gt;(n):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    temp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;temp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        temp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F;&#x2F;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;        t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;math&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span&gt;(n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;** &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;t))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#88c0d0;&quot;&gt;pow&lt;&#x2F;span&gt;&lt;span&gt;(k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;        denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;        n_prime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;denominator
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(n_prime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;n):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(n_prime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;n):
&lt;&#x2F;span&gt;&lt;span&gt;            k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;            k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;math&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span&gt;(n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;** &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;t))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;k 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;apad3-sol3-time.png&quot; alt=&quot;Running time of solution 3 to n = 10^18&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And I wanted to calculate how many iterations each one took.
The &lt;code&gt;good_base2&lt;&#x2F;code&gt; took a total of 3511 iterations while the &lt;code&gt;good_base3&lt;&#x2F;code&gt; took 62 iterations. This make me not sure about the correctness of the last one. I mean I could just try it on leetcode and see. Also I have been avoiding the String thing in the questions. I&#x27;m assuming I can just parse the string as u128 in rust.
okay second one is definetely wrong.
well it wasn&#x27;t wrong the floats caused the error. if t ever becomes 1, the float power function to calculate k cannot
store the value exactly. (this was the problem in both rust and python). rust has f128 which didn&#x27;t cause this issue but thats not a stable feature so i could not use that.
anyway if it t becomes 1 then we know the answer is n-1 so i run the loop until t is greater than 1.
when the loop exit, I know if it exited by finding the value or if t reaching one. I used bool found for that but as im writing this I realize I could have just checked t is 1 or not.
also python solution also caused the floating point approximation error. so does that mean python stores floating point as 64 bits too.&lt;&#x2F;p&gt;
&lt;p&gt;and why didn&#x27;t this happen for the number $10^{18}$ but for a complete random number.
I think this could all be explained if I made some proof and explaination of the problem but then again I&#x27;m really not in the mood. so&lt;&#x2F;p&gt;
&lt;h2 id=&quot;destination&quot;&gt;Destination&lt;&#x2F;h2&gt;
&lt;p&gt;I don&#x27;t really know what to write here. I mean usually I write how the solution works but for this one I feel like I&#x27;ve already explained everything in the [[#Journey]] section above. So have a look at the solution in rust.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Solution {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;smallest_good_base&lt;&#x2F;span&gt;&lt;span&gt;(n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; String) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;u128&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; temp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; found &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; approximate log base 2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; temp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            temp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;((n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as f64&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;powf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as f64&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as u128&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; n_prime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;pow&lt;&#x2F;span&gt;&lt;span&gt;(t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;(k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; n_prime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; n {
&lt;&#x2F;span&gt;&lt;span&gt;                found &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt; n_prime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; n {
&lt;&#x2F;span&gt;&lt;span&gt;                k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;((n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as f64&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;powf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as f64&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as u128&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; found {
&lt;&#x2F;span&gt;&lt;span&gt;            k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            (n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A problem a day: Day 2</title>
        <published>2025-02-22T00:00:00+00:00</published>
        <updated>2025-02-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              faulty
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://faulty.carboxi.de/aproblemaday2/"/>
        <id>https://faulty.carboxi.de/aproblemaday2/</id>
        
        <content type="html" xml:base="https://faulty.carboxi.de/aproblemaday2/">&lt;h2 id=&quot;origin&quot;&gt;Origin&lt;&#x2F;h2&gt;
&lt;p&gt;url: &lt;a href=&quot;https:&#x2F;&#x2F;leetcode.com&#x2F;problems&#x2F;jump-game&#x2F;description&#x2F;&quot;&gt;Leetcode: Problem no. 55&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;problem&quot;&gt;Problem&lt;&#x2F;h3&gt;
&lt;p&gt;You are given an integer array &lt;code&gt;nums&lt;&#x2F;code&gt;. You are initially positioned at the array&#x27;s &lt;strong&gt;first index&lt;&#x2F;strong&gt;, and each element in the array represents your maximum jump length at that position.&lt;&#x2F;p&gt;
&lt;p&gt;Return &lt;code&gt;true&lt;&#x2F;code&gt; &lt;em&gt;if you can reach the last index, or&lt;&#x2F;em&gt; &lt;code&gt;false&lt;&#x2F;code&gt; &lt;em&gt;otherwise&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Input:&lt;&#x2F;strong&gt; nums = [2,3,1,1,4]
&lt;strong&gt;Output:&lt;&#x2F;strong&gt; true
&lt;strong&gt;Explanation:&lt;&#x2F;strong&gt; Jump 1 step from index 0 to 1, then 3 steps to the last index.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Input:&lt;&#x2F;strong&gt; nums = [3,2,1,0,4]
&lt;strong&gt;Output:&lt;&#x2F;strong&gt; false
&lt;strong&gt;Explanation:&lt;&#x2F;strong&gt; You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;constraints&quot;&gt;Constraints&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;$1 &amp;lt;= nums.length &amp;lt;= 10^4$&lt;&#x2F;li&gt;
&lt;li&gt;$0 &amp;lt;= nums[i] &amp;lt;= 10^5$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;journey&quot;&gt;Journey&lt;&#x2F;h2&gt;
&lt;p&gt;Well if the index of the array are the nodes of a graph and the jumps indicate the path from one node to another ten its just finding if a path exists from first to last node(index). With the added context and information I feel like there is an easier way to do this.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-simple-dfs&quot;&gt;A Simple DFS&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;put the start index(0) in the stack.&lt;&#x2F;li&gt;
&lt;li&gt;while the stack is not empty
&lt;ul&gt;
&lt;li&gt;pop from stack&lt;&#x2F;li&gt;
&lt;li&gt;if this is the final index (nums.length) return true&lt;&#x2F;li&gt;
&lt;li&gt;put all of its children (current index + (1 to the value at current index))&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;return false&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;DFS time complexity is $\mathcal{O}(b^m)$ where b is the branching factor and m is the maximum depth
which is a lot to be honest.
And I was correct.
&lt;img src=&quot;&#x2F;images&#x2F;apad2-time.png&quot; alt=&quot;Solution rejected due to time limit exceeding&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;so I do need to optimize this using the added information or go for a different approach.&lt;&#x2F;p&gt;
&lt;p&gt;starting from the last index, move down wards to the first index
if value at current index is greater than or equal to (goal index - current index) set goal index to current index&lt;&#x2F;p&gt;
&lt;p&gt;when the loop ends, if the goal index is 0 return true else false&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t know how I went from exponential time to linear time. Also I don&#x27;t know what made me think about the numbers in reverse.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;destination&quot;&gt;Destination&lt;&#x2F;h2&gt;
&lt;p&gt;We have a list of numbers, for example like this [2,3,1,1,4], and we want to find if we can go from index 0 to last index. Say we are at the goal index, so without any jumping we are already at the goal index and thus have reached it.&lt;&#x2F;p&gt;
&lt;p&gt;What about the index one before the goal. If we can jump from this one to goal, we have reached the goal index. How do we know if we can jump from this one to the last one? Since the value at that index indicates the jumping ability, we can jump from current index to goal index if the value is greater than the distance between current index and goal index. So if the value is greater than or equal to 1 we can reach the goal index from the index one before it.&lt;&#x2F;p&gt;
&lt;p&gt;Do you know what this means? It means the if we can somehow reach this index, then we can reach the goal index as well. So we can just set this index as the goal index.&lt;&#x2F;p&gt;
&lt;p&gt;What if we can&#x27;t jump from this index to the goal one? Does that mean we stop the algorithm and return false? No, because the index before this index may have the jumping ability to jump over this index. Imagine the numbers as [2, 0, 1]. The second last index&#x27;s value is 0 so we can&#x27;t reach the goal state from it. But the index before it, the first index,  has value 2 which is equal to the distance between first index and the goal index. So we set the goal index to first index.&lt;&#x2F;p&gt;
&lt;p&gt;We continue this until we reach the first index. At this point, the goal index will the index closest to the first index from which we can reach the actual goal index defined in the problem. If we can reach  the current goal index from the first index, the goal index becomes the first index.&lt;&#x2F;p&gt;
&lt;p&gt;If ,after the loop is finished, the goal index is the current index, that means we can reach the actual goal index from the first index.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Solution {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;can_jump&lt;&#x2F;span&gt;&lt;span&gt;(nums&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; goal_idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; nums&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(curr_idx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; val) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; nums&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;rev&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if *&lt;&#x2F;span&gt;&lt;span&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span&gt;(goal_idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; curr_idx) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                goal_idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; curr_idx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        } 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; goal_idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;return true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;return false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A problem a day: Day 1</title>
        <published>2025-02-20T00:00:00+00:00</published>
        <updated>2025-02-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              faulty
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://faulty.carboxi.de/aproblemaday/"/>
        <id>https://faulty.carboxi.de/aproblemaday/</id>
        
        <content type="html" xml:base="https://faulty.carboxi.de/aproblemaday/">&lt;h2 id=&quot;origin&quot;&gt;Origin&lt;&#x2F;h2&gt;
&lt;p&gt;url: &lt;a href=&quot;https:&#x2F;&#x2F;leetcode.com&#x2F;problems&#x2F;minimum-money-required-before-transactions&#x2F;description&#x2F;&quot;&gt;Leetcode: Problem no. 2412&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;problem&quot;&gt;Problem&lt;&#x2F;h3&gt;
&lt;p&gt;You are given a &lt;strong&gt;0-indexed&lt;&#x2F;strong&gt; 2D integer array &lt;code&gt;transactions&lt;&#x2F;code&gt;, where &lt;code&gt;transactions[i] = [costi, cashbacki]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The array describes transactions, where each transaction must be completed exactly once in &lt;strong&gt;some order&lt;&#x2F;strong&gt;. At any given moment, you have a certain amount of &lt;code&gt;money&lt;&#x2F;code&gt;. In order to complete transaction &lt;code&gt;i&lt;&#x2F;code&gt;, &lt;code&gt;money &amp;gt;= costi&lt;&#x2F;code&gt; must hold true. After performing a transaction, &lt;code&gt;money&lt;&#x2F;code&gt; becomes &lt;code&gt;money - costi + cashbacki&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Return &lt;em&gt;the minimum amount of&lt;&#x2F;em&gt; &lt;code&gt;money&lt;&#x2F;code&gt; &lt;em&gt;required before any transaction so that all of the transactions can be completed &lt;strong&gt;regardless of the order&lt;&#x2F;strong&gt; of the transactions.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Input:&lt;&#x2F;strong&gt; transactions = [ [2,1],[5,0],[4,2] ]
&lt;strong&gt;Output:&lt;&#x2F;strong&gt; 10
&lt;strong&gt;Explanation:&lt;&#x2F;strong&gt;
Starting with money = 10, the transactions can be performed in any order.
It can be shown that starting with money &amp;lt; 10 will fail to complete all transactions in some order.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Input:&lt;&#x2F;strong&gt; transactions = [ [3,0],[0,3] ]
&lt;strong&gt;Output:&lt;&#x2F;strong&gt; 3
&lt;strong&gt;Explanation:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If transactions are in the order [ [3,0],[0,3] ], the minimum money required to complete the transactions is 3.&lt;&#x2F;li&gt;
&lt;li&gt;If transactions are in the order [ [0,3],[3,0] ], the minimum money required to complete the transactions is 0.
Thus, starting with money = 3, the transactions can be performed in any order.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;constraints&quot;&gt;Constraints&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= transactions.length &amp;lt;= $10^5$&lt;&#x2F;li&gt;
&lt;li&gt;transactions[i].length == 2&lt;&#x2F;li&gt;
&lt;li&gt;$0 &amp;lt;= cost_i, cashback_i &amp;lt;= 10^9$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;journey&quot;&gt;Journey&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;sorting&quot;&gt;Sorting&lt;&#x2F;h3&gt;
&lt;p&gt;if i sort the outer array based on the cash back in ascending order, the order I get will require the most money initially(I think).
It certainly works on the examples.&lt;&#x2F;p&gt;
&lt;p&gt;Lets see
for transactions of [ [4, 1], [3, 3], [5, 7], [9, 2] ]
when sorted in ascending order of cashback
sorted transaction = [ [4, 1], [9, 2], [3, 3], [5, 7] ]
so minimum required cost: x - 4 + 1 - 9 + 2 - 3 + 3 - 5 = 0; x =  15&lt;&#x2F;p&gt;
&lt;p&gt;after calculating the money for all the permutations of the above transactions&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;color:#d8dee9;&quot;&gt;&lt;code&gt;&lt;span&gt;[0]: ([4, 1], [3, 3], [5, 7], [9, 2]) initial money:  10
&lt;&#x2F;span&gt;&lt;span&gt;[1]: ([4, 1], [3, 3], [9, 2], [5, 7]) initial money:  15
&lt;&#x2F;span&gt;&lt;span&gt;[2]: ([4, 1], [5, 7], [3, 3], [9, 2]) initial money:  10
&lt;&#x2F;span&gt;&lt;span&gt;[3]: ([4, 1], [5, 7], [9, 2], [3, 3]) initial money:  11
&lt;&#x2F;span&gt;&lt;span&gt;[4]: ([4, 1], [9, 2], [3, 3], [5, 7]) initial money:  15
&lt;&#x2F;span&gt;&lt;span&gt;[5]: ([4, 1], [9, 2], [5, 7], [3, 3]) initial money:  11
&lt;&#x2F;span&gt;&lt;span&gt;[6]: ([3, 3], [4, 1], [5, 7], [9, 2]) initial money:  10
&lt;&#x2F;span&gt;&lt;span&gt;[7]: ([3, 3], [4, 1], [9, 2], [5, 7]) initial money:  15
&lt;&#x2F;span&gt;&lt;span&gt;[8]: ([3, 3], [5, 7], [4, 1], [9, 2]) initial money:  10
&lt;&#x2F;span&gt;&lt;span&gt;[9]: ([3, 3], [5, 7], [9, 2], [4, 1]) initial money:  9
&lt;&#x2F;span&gt;&lt;span&gt;[10]: ([3, 3], [9, 2], [4, 1], [5, 7]) initial money:  15
&lt;&#x2F;span&gt;&lt;span&gt;[11]: ([3, 3], [9, 2], [5, 7], [4, 1]) initial money:  9
&lt;&#x2F;span&gt;&lt;span&gt;[12]: ([5, 7], [4, 1], [3, 3], [9, 2]) initial money:  10
&lt;&#x2F;span&gt;&lt;span&gt;[13]: ([5, 7], [4, 1], [9, 2], [3, 3]) initial money:  11
&lt;&#x2F;span&gt;&lt;span&gt;[14]: ([5, 7], [3, 3], [4, 1], [9, 2]) initial money:  10
&lt;&#x2F;span&gt;&lt;span&gt;[15]: ([5, 7], [3, 3], [9, 2], [4, 1]) initial money:  9
&lt;&#x2F;span&gt;&lt;span&gt;[16]: ([5, 7], [9, 2], [4, 1], [3, 3]) initial money:  11
&lt;&#x2F;span&gt;&lt;span&gt;[17]: ([5, 7], [9, 2], [3, 3], [4, 1]) initial money:  9
&lt;&#x2F;span&gt;&lt;span&gt;[18]: ([9, 2], [4, 1], [3, 3], [5, 7]) initial money:  15
&lt;&#x2F;span&gt;&lt;span&gt;[19]: ([9, 2], [4, 1], [5, 7], [3, 3]) initial money:  11
&lt;&#x2F;span&gt;&lt;span&gt;[20]: ([9, 2], [3, 3], [4, 1], [5, 7]) initial money:  15
&lt;&#x2F;span&gt;&lt;span&gt;[21]: ([9, 2], [3, 3], [5, 7], [4, 1]) initial money:  9
&lt;&#x2F;span&gt;&lt;span&gt;[22]: ([9, 2], [5, 7], [4, 1], [3, 3]) initial money:  11
&lt;&#x2F;span&gt;&lt;span&gt;[23]: ([9, 2], [5, 7], [3, 3], [4, 1]) initial money:  9
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The minimum amount of money for any order of transaction is 15 from the above results. Now 15 is returned by many orderings 1, 4, 7, 18, and 20. I don&#x27;t know if this means my algorithm is correct or not but I&#x27;m gonna try it.&lt;&#x2F;p&gt;
&lt;p&gt;This sorting approach is fundamentally flawed but I&#x27;m gonna list some of the problems I thought there were with the approach that led me to the actual solution.&lt;&#x2F;p&gt;
&lt;p&gt;First the obvious one. The maximum initial money required could be at any point during the series of transactions and not only at the end. (I didn&#x27;t think why when I was solving it last night., it was very late, otherwise I think I would have reached the solution sooner)
Okay so I should keep a maximum money that variable and update it only when money is greater than current maximum money. (again should have just thought for a moment why I needed to do this instead of running through hoops to make the solution work)&lt;&#x2F;p&gt;
&lt;p&gt;So I have the maximum initial money that I need throughout the transactions. This is it, right? Wrong. What about the ones where the cost is 0. Then the transaction is basically giving free cashback no matter if its smaller than the others. (I hadn&#x27;t clocked it still but I&#x27;m getting there) I should just keep these transactions with zero cost at the end so that they don&#x27;t affect the maximum_money.&lt;&#x2F;p&gt;
&lt;p&gt;&quot;Okay hopefully it works now, I need to sleep&quot; is what I thought but of course it doesn&#x27;t and it didn&#x27;t. Then I became aware of the third type of transactions in this whole thing. The transactions where cost is not 0 but some positive value but the cashback is still greater than cost so  it also decreases the maximum  initial money required and thus should be push to the last.&lt;&#x2F;p&gt;
&lt;p&gt;I had one final go where I put the transaction  with maximum cost among the negative (negative cost - cashback) at the front of those transactions. It still didn&#x27;t work.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;difference&quot;&gt;Difference&lt;&#x2F;h3&gt;
&lt;p&gt;And then I realized I didn&#x27;t need to sort the transactions in the first place. Since only the transactions with the positive (in terms of cost) result mattered, I could find the sum of the positive transactions. Since I would have to pay the cost of transaction and then I got the cashback, if I added the highest cashback to that positive sum, then that is the minimum amount of money initially  to complete all of the transactions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;If&lt;&#x2F;strong&gt; the transactions where cost is less than cashback didn&#x27;t exist, which practically shouldn&#x27;t but the problem constraint  $0 &amp;lt;= cost_i, cashback_i &amp;lt;= 10^9$ doesn&#x27;t say anything about that. So the last step of the positive sum is to negate the effect of the highest cashback since I don&#x27;t get it until I pay the cost of that transaction.&lt;&#x2F;p&gt;
&lt;p&gt;Now I should include it in if the highest cost among the negative transactions(where cashback &amp;gt; cost) is greater than highest cashback. This lead me to the solution below.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Solution {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;minimum_money&lt;&#x2F;span&gt;&lt;span&gt;(transactions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;i64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; positive_sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;i32 =&lt;&#x2F;span&gt;&lt;span&gt; transactions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|transaction| transaction[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; transaction[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;diff| diff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; highest_neg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; tran &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;transactions {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; tran[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; tran[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; tran[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; highest_neg {
&lt;&#x2F;span&gt;&lt;span&gt;                highest_neg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tran[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; highest_cashback_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; highest_cashback &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; tran) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; transactions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(tran[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; tran[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; highest_cashback &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; tran[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;                highest_cashback &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tran[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                highest_cashback_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; highest_cashback &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; highest_neg {
&lt;&#x2F;span&gt;&lt;span&gt;            (positive_sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;highest_neg) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as i64
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            (positive_sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;highest_cashback) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as i64
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It didn&#x27;t work because I forgot to factor in the transactions where cost == cashback. It was very late at night so I went to sleep which I couldn&#x27;t do anyway. I kept thinking about it and not long before I realized about the zero transactions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;destination&quot;&gt;Destination&lt;&#x2F;h2&gt;
&lt;p&gt;Each transactions can be classified into two types, positive transactions where cost is greater than cashback and negative ones where cost is equal to or less than cash back.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s just look at the positive transactions for now—where the cost is more than the cashback. Since we always have to pay more than we get back, the minimum amount of money we need keeps going up with each transaction. But since we get the cashback right after each transaction, the order doesn’t really matter—except for the last one.&lt;&#x2F;p&gt;
&lt;p&gt;The last transaction is different because we need enough money to cover its cost before we get its cashback. So, the worst possible order—the one that makes us need the most money upfront—is when the transaction with the highest cashback is saved for last. If we got that cashback earlier, it would’ve helped lower the amount of money we needed. But by putting it last, we miss out on that advantage, making us start with more money to complete every transactions.&lt;&#x2F;p&gt;
&lt;p&gt;For negative transactions, we only need to consider the one with the highest cost. Any other negative transaction would give more cashback than it costs, meaning it would actually reduce the amount of money we need upfront.&lt;&#x2F;p&gt;
&lt;p&gt;If $M_p$ is the minimum money required for the positive transactions, then adding the most expensive negative transaction with cost $C_n$ means we also need to complete the last positive transaction. Completing the last positive transaction gives us its maximum cashback, $B_p$.&lt;&#x2F;p&gt;
&lt;p&gt;So, the initial money required in this case would be $M_p + C_n - B_p$. Since we&#x27;re trying to find the worst-case scenario—the order that requires the most money upfront—we need to check if including this negative transaction actually increases the required money or not. If $C_n$ is greater than $B_p$, it makes the starting money go up, meaning it should be included in the worst case. If not, then we can ignore it because it doesn’t increase the initial money required.&lt;&#x2F;p&gt;
&lt;p&gt;This is the final solution I came up with. It is in rust.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;minimum_money&lt;&#x2F;span&gt;&lt;span&gt;(transactions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;i64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; pos_sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;i64 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; max_cb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; max_neg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; tran &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; transactions {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; diff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tran[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; tran[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(diff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;   pos_sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; diff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; max_cb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; tran[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;    max_cb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tran[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; max_neg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; tran[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;    max_neg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tran[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; max_cb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; max_neg {
&lt;&#x2F;span&gt;&lt;span&gt;  pos_sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;max_neg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as i64
&lt;&#x2F;span&gt;&lt;span&gt; } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  pos_sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;max_cb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as i64
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Hello</title>
        <published>2025-02-08T00:00:00+00:00</published>
        <updated>2025-02-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              faulty
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://faulty.carboxi.de/hello/"/>
        <id>https://faulty.carboxi.de/hello/</id>
        
        <content type="html" xml:base="https://faulty.carboxi.de/hello/">&lt;h2 id=&quot;hello&quot;&gt;Hello&lt;&#x2F;h2&gt;
&lt;p&gt;Welcome to by 4th? or maybe it&#x27;s 5th? personal site.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Template</title>
        <published>2014-03-14T15:09:26+05:45</published>
        <updated>2014-03-14T15:09:26+05:45</updated>
        
        <author>
          <name>
            
              faulty
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://faulty.carboxi.de/one/"/>
        <id>https://faulty.carboxi.de/one/</id>
        
        <content type="html" xml:base="https://faulty.carboxi.de/one/">&lt;h1 id=&quot;h1-heading&quot;&gt;h1 Heading&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;h2-heading&quot;&gt;h2 Heading&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;h3-heading&quot;&gt;h3 Heading&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;h4-heading&quot;&gt;h4 Heading&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;h5-heading&quot;&gt;h5 Heading&lt;&#x2F;h5&gt;
&lt;h6 id=&quot;h6-heading&quot;&gt;h6 Heading&lt;&#x2F;h6&gt;
&lt;h2 id=&quot;horizontal-rules&quot;&gt;Horizontal Rules&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#2e3440;color:#d8dee9;&quot;&gt;&lt;code&gt;&lt;span&gt;---
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;pre style=&quot;background-color:#2e3440;color:#d8dee9;&quot;&gt;&lt;code&gt;&lt;span&gt;***
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;emphasis&quot;&gt;Emphasis&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;This is bold text&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;This is bold text&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;This is italic text&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;This is italic text&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;del&gt;Strikethrough&lt;&#x2F;del&gt;&lt;&#x2F;p&gt;
&lt;p&gt;[&lt;em&gt;This is handwriting.&lt;&#x2F;em&gt;]&lt;&#x2F;p&gt;
&lt;h2 id=&quot;blockquotes&quot;&gt;Blockquotes&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Blockquotes can also be nested...&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;...by using additional greater-than signs right next to each other...&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;...or with spaces between arrows.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;&#x2F;h2&gt;
&lt;p&gt;Unordered&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create a list by starting a line with &lt;code&gt;+&lt;&#x2F;code&gt;, &lt;code&gt;-&lt;&#x2F;code&gt;, or &lt;code&gt;*&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Sub-lists are made by indenting 2 spaces:
&lt;ul&gt;
&lt;li&gt;Marker character change forces new list start:
&lt;ul&gt;
&lt;li&gt;Ac tristique libero volutpat at&lt;&#x2F;li&gt;
&lt;li&gt;Facilisis in pretium nisl aliquet&lt;&#x2F;li&gt;
&lt;li&gt;Nulla volutpat aliquam velit&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Very easy!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Ordered&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Lorem ipsum dolor sit amet&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Consectetur adipiscing elit&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Integer molestie lorem at massa&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;You can use sequential numbers...&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;...or keep all the numbers as &lt;code&gt;1.&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Start numbering with offset:&lt;&#x2F;p&gt;
&lt;ol start=&quot;57&quot;&gt;
&lt;li&gt;foo&lt;&#x2F;li&gt;
&lt;li&gt;bar&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;code&quot;&gt;Code&lt;&#x2F;h2&gt;
&lt;p&gt;Inline &lt;code&gt;code&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Indented code&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;color:#d8dee9;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; Some comments
&lt;&#x2F;span&gt;&lt;span&gt;line 1 of code
&lt;&#x2F;span&gt;&lt;span&gt;line 2 of code
&lt;&#x2F;span&gt;&lt;span&gt;line 3 of code
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Block code &quot;fences&quot;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;color:#d8dee9;&quot;&gt;&lt;code&gt;&lt;span&gt;Sample text here...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Syntax highlighting&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= function &lt;&#x2F;span&gt;&lt;span&gt;(bar) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;tables&quot;&gt;Tables&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Option&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;data&lt;&#x2F;td&gt;&lt;td&gt;path to data files to supply the data that will be passed into templates.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;engine&lt;&#x2F;td&gt;&lt;td&gt;engine to be used for processing templates. Handlebars is the default.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ext&lt;&#x2F;td&gt;&lt;td&gt;extension to be used for dest files.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Right aligned columns&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: right&quot;&gt;Option&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;data&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;path to data files to supply the data that will be passed into templates.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;engine&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;engine to be used for processing templates. Handlebars is the default.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;ext&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;extension to be used for dest files.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;links&quot;&gt;Links&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;dev.nodeca.com&quot;&gt;link text&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;nodeca.github.io&#x2F;pica&#x2F;demo&#x2F;&quot; title=&quot;title text!&quot;&gt;link with title&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Autoconverted link &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nodeca&#x2F;pica&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;nodeca&#x2F;pica&lt;&#x2F;a&gt; (enable linkify to see)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;images&quot;&gt;Images&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;octodex.github.com&#x2F;images&#x2F;minion.png&quot; alt=&quot;Minion&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;octodex.github.com&#x2F;images&#x2F;stormtroopocat.jpg&quot; alt=&quot;Stormtroopocat&quot; title=&quot;The Stormtroopocat&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Like links, Images also have a footnote style syntax&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;octodex.github.com&#x2F;images&#x2F;dojocat.jpg&quot; alt=&quot;Alt text&quot; title=&quot;The Dojocat&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With a reference later in the document defining the URL location:&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
